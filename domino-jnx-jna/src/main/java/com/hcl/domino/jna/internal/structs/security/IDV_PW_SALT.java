/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs.security;
import com.hcl.domino.commons.structs.WrongArraySizeException;
import com.hcl.domino.misc.NotesConstants;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IDV_PW_SALT extends Structure {
	public short PW_Salt_Alg;
	public short PW_Salt_Size;
	public short Client_Auth_Size;
	public short Server_Auth_Size;
	/** C type : BYTE[SHA256_DIGEST_SIZE] */
	public byte[] PW_Salt_Data = new byte[NotesConstants.SHA256_DIGEST_SIZE];
	/** C type : BYTE[MAX_CLIENT_AUTH_SIZE] */
	public byte[] Client_Auth_Data = new byte[NotesConstants.MAX_CLIENT_AUTH_SIZE];
	/** C type : BYTE[PARTIAL_DH_TLV_SIZE] */
	public byte[] Server_Auth_Data = new byte[NotesConstants.PARTIAL_DH_TLV_SIZE];
	
	public IDV_PW_SALT() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"PW_Salt_Alg", //$NON-NLS-1$
			"PW_Salt_Size", //$NON-NLS-1$
			"Client_Auth_Size", //$NON-NLS-1$
			"Server_Auth_Size", //$NON-NLS-1$
			"PW_Salt_Data", //$NON-NLS-1$
			"Client_Auth_Data", //$NON-NLS-1$
			"Server_Auth_Data" //$NON-NLS-1$
		);
	}
	/**
	 * @param PW_Salt_Alg the salt argument
	 * @param PW_Salt_Size the size of {@code PW_Salt_Data}
	 * @param Client_Auth_Size the size of {@code Client_Auth_Data}
	 * @param Server_Auth_Size the size of {@code Server_Auth_Data}
	 * @param PW_Salt_Data C type : BYTE[SHA256_DIGEST_SIZE]
	 * @param Client_Auth_Data C type : BYTE[MAX_CLIENT_AUTH_SIZE]
	 * @param Server_Auth_Data C type : BYTE[PARTIAL_DH_TLV_SIZE]
	 */
	public IDV_PW_SALT(short PW_Salt_Alg, short PW_Salt_Size, short Client_Auth_Size, short Server_Auth_Size, byte PW_Salt_Data[], byte Client_Auth_Data[], byte Server_Auth_Data[]) {
		super();
		this.PW_Salt_Alg = PW_Salt_Alg;
		this.PW_Salt_Size = PW_Salt_Size;
		this.Client_Auth_Size = Client_Auth_Size;
		this.Server_Auth_Size = Server_Auth_Size;
		if ((PW_Salt_Data.length != this.PW_Salt_Data.length)) {
			throw new WrongArraySizeException("PW_Salt_Data"); //$NON-NLS-1$
		}
		this.PW_Salt_Data = PW_Salt_Data;
		if ((Client_Auth_Data.length != this.Client_Auth_Data.length)) {
			throw new WrongArraySizeException("Client_Auth_Data"); //$NON-NLS-1$
		}
		this.Client_Auth_Data = Client_Auth_Data;
		if ((Server_Auth_Data.length != this.Server_Auth_Data.length)) {
			throw new WrongArraySizeException("Server_Auth_Data"); //$NON-NLS-1$
		}
		this.Server_Auth_Data = Server_Auth_Data;
	}
	public IDV_PW_SALT(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IDV_PW_SALT implements Structure.ByReference {
		
	};
	public static class ByValue extends IDV_PW_SALT implements Structure.ByValue {
		
	};
}
