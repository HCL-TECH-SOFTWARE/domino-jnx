/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.hcl.domino.misc.NotesConstants;
import com.hcl.domino.misc.NotesConstants.DESIGN_COMPONENT_ATTR;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesResultsSortColumn extends BaseStructure {
	/**
	 * programmatic name \ufffd used for all reference<br>
	 * C type : char[1]
	 */
	public byte[] name = new byte[NotesConstants.MAX_CMD_VALLEN];
	/**
	 * view column title (view results only)<br>
	 * C type : char[1]
	 */
	public byte[] title = new byte[NotesConstants.MAX_CMD_VALLEN];
	/**
	 * used during fetch only<br>
	 * C type : char*
	 */
	public Pointer pFormula;
	/**
	 * ASC, DESC or none<br>
	 * C type : DESIGN_COMPONENT_ATTR
	 * @see DESIGN_COMPONENT_ATTR
	 */
	public int sortorder;
	/** column is sorted, not returned */
	public boolean bHidden;
	/** categorized (unique values only) */
	public boolean bCategorized;
	/** a column whose values are aggregated across categorized keys */
	public boolean bAggregate;
	/**
	 * AVG, MAX, MIN, SUM, COUNT, COUNTVALS, STDDEV<br>
	 * C type : QUEP_AGGREGATE_TYPE
	 */
	public int aggtype;
	/**
	 * Support all data types for @@min or @@max (can't be both)<br>
	 * C type : ITEM_TABLE*
	 */
	public NotesItemTableStruct pMinMaxVal;
	/** for @@countvals (count distinct values, this category) */
	public int dwCtVals;
	/**
	 * The sum of all values this column, this category<br>
	 * C type : NUMBER
	 */
	public double numAggSum;
	/**
	 * Current Max or Minimum value<br>
	 * C type : NUMBER
	 */
	public double numMaxMin;
	/**
	 * Final result, per category<br>
	 * C type : NUMBER
	 */
	public double numAggResult;
	/** rightmost set of columns which generate array elements for categorization */
	public boolean bCategLeaf;
	/** Leftmost categorized column (they can nest) */
	public boolean bFirstCateg;
	/** Rightmost categorized column */
	public boolean bLastCateg;
	/** Keep track of when we need to snip off an array and attach it */
	public boolean bCategBreak;
	/** Count the breaks for commas in JSON */
	public int dwCategBreaks;
	/** Pre-count the columns participating in this category (category breaks on multiple column values) */
	public short wColsInCateg;
	/** Either a categorized column, or part of a multiple-column category value */
	public boolean bCategorizedKey;
	/** The number of TYPE_NUMBER entries this category (for producing @@avg and @@count) */
	public int dwEntries;
	/** The number of occurrences (including LIST occurrences) of a column field */
	public int dwColOccs;
	/**
	 * Copy of last ITEM_TABLE for comparison<br>
	 * C type : char*
	 */
	public Pointer pdwCurItemValue;
	
	public NotesResultsSortColumn() {
		super();
	}

	@Override
	protected int getOverrideAlignment() {
		return Structure.ALIGN_DEFAULT;
	}
	
	public static NotesResultsSortColumn newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<NotesResultsSortColumn>) () -> {
			return new NotesResultsSortColumn();
		});
	}

	@SuppressWarnings("nls")
  @Override
  protected List<String> getFieldOrder() {
		return Arrays.asList("name", "title", "pFormula", "sortorder", "bHidden", "bCategorized", "bAggregate", "aggtype", "pMinMaxVal", "dwCtVals", "numAggSum", "numMaxMin", "numAggResult", "bCategLeaf", "bFirstCateg", "bLastCateg", "bCategBreak", "dwCategBreaks", "wColsInCateg", "bCategorizedKey", "dwEntries", "dwColOccs", "pdwCurItemValue");
	}
	
	public NotesResultsSortColumn(Pointer peer) {
		super(peer);
	}
	
	public static NotesResultsSortColumn newInstance(Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<NotesResultsSortColumn>) () -> {
			return new NotesResultsSortColumn(peer);
		});
	}

	public static NotesResultsSortColumn.ByReference newInstanceByReference() {
		return AccessController.doPrivileged((PrivilegedAction<NotesResultsSortColumn.ByReference>) () -> {
			return new NotesResultsSortColumn.ByReference();
		});
	}

	public static class ByReference extends NotesResultsSortColumn implements Structure.ByReference {
		public ByReference() {
			super();
		}
	};
	public static class ByValue extends NotesResultsSortColumn implements Structure.ByValue {
		
	};
}
