/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs.security;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IDV_PH3_OBJECTS extends Structure {
	/**
	 * Authentication Token request info<br>
	 * C type : SEC_MEMOBJ_DESC
	 */
	public SEC_MEMOBJ_DESC ClientInfo;
	/**
	 * Authentication Token request info<br>
	 * C type : SEC_MEMOBJ_DESC
	 */
	public SEC_MEMOBJ_DESC ReqInfo;
	/**
	 * Authentication Token info<br>
	 * C type : SEC_MEMOBJ_DESC
	 */
	public SEC_MEMOBJ_DESC AuthInfo;
	/** C type : void* */
	public Pointer vpCallbackList;
	/**
	 * Not used if we are using one of the<br>
	 * C type : void*
	 */
	public Pointer vpHandlerCtx;
	public int ServiceID;
	
	public IDV_PH3_OBJECTS() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"ClientInfo", //$NON-NLS-1$
			"ReqInfo", //$NON-NLS-1$
			"AuthInfo", //$NON-NLS-1$
			"vpCallbackList", //$NON-NLS-1$
			"vpHandlerCtx", //$NON-NLS-1$
			"ServiceID" //$NON-NLS-1$
		);
	}
	/**
	 * @param ClientInfo Authentication Token request info<br>
	 * C type : SEC_MEMOBJ_DESC
	 * @param ReqInfo Authentication Token request info<br>
	 * C type : SEC_MEMOBJ_DESC
	 * @param AuthInfo Authentication Token info<br>
	 * C type : SEC_MEMOBJ_DESC
	 * @param vpCallbackList C type : void*
	 * @param vpHandlerCtx Not used if we are using one of the<br>
	 * C type : void*
	 * @param ServiceID the service ID
	 */
	public IDV_PH3_OBJECTS(SEC_MEMOBJ_DESC ClientInfo, SEC_MEMOBJ_DESC ReqInfo, SEC_MEMOBJ_DESC AuthInfo, Pointer vpCallbackList, Pointer vpHandlerCtx, int ServiceID) {
		super();
		this.ClientInfo = ClientInfo;
		this.ReqInfo = ReqInfo;
		this.AuthInfo = AuthInfo;
		this.vpCallbackList = vpCallbackList;
		this.vpHandlerCtx = vpHandlerCtx;
		this.ServiceID = ServiceID;
	}
	public IDV_PH3_OBJECTS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IDV_PH3_OBJECTS implements Structure.ByReference {
		
	};
	public static class ByValue extends IDV_PH3_OBJECTS implements Structure.ByValue {
		
	};
}
