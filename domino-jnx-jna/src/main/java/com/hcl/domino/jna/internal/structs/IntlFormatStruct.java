/*
 * ==========================================================================
 * Copyright (C) 2019-2022 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.hcl.domino.misc.NotesConstants;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IntlFormatStruct extends BaseStructure {
	/**
	 * OR'd #defines for daylight<br>
	 * savings, number, time, and date<br>
	 * formats - see Symbolic Values<br>
	 * CLOCK_24_HOUR, CURRENCY_SPACE,<br>
	 * CURRENCY_SUFFIX, DATE_DMY,<br>
	 * DATE_MDY, DATE_YMD,<br>
	 * DAYLIGHT_SAVINGS,<br>
	 * NUMBER_LEADING_ZERO
	 */
	public short Flags;
	/**
	 * Number of decimal digits in<br>
	 * fractional monetary amounts
	 */
	public byte CurrencyDigits;
	/**
	 * Length of this structure                                     If this structure is set from<br>
	 * scratch, THIS MUST BE SET TO<br>
	 * THE EXACT SIZE OF THE STRUCTURE<br>
	 * WHEN ITS POINTER IS PASSED AS<br>
	 * AN ARGUMENT
	 */
	public byte Length;
	/**
	 * number of hours added to the time<br>
	 * to get Greenwich Mean Time. May be <br>
	 * positive or negative.
	 */
	public int TimeZone;
	/**
	 * AM/am string used in countries<br>
	 * with 12 hour time format<br>
	 * C type : char[ISTRMAX]
	 */
	public byte[] AMString = new byte[NotesConstants.ISTRMAX];
	/**
	 * PM/pm string used in countries<br>
	 * with 12 hour time format<br>
	 * C type : char[ISTRMAX]
	 */
	public byte[] PMString = new byte[NotesConstants.ISTRMAX];
	/**
	 * Symbol for currency:<br>
	 * $, Fr, SEK, etc.<br>
	 * C type : char[ISTRMAX]
	 */
	public byte[] CurrencyString = new byte[NotesConstants.ISTRMAX];
	/**
	 * Symbol formatting monetary<br>
	 * amounts in thousands<br>
	 * C type : char[ISTRMAX]
	 */
	public byte[] ThousandString = new byte[NotesConstants.ISTRMAX];
	/**
	 * Symbol denoting decimal<br>
	 * fraction of monetary amounts<br>
	 * C type : char[ISTRMAX]
	 */
	public byte[] DecimalString = new byte[NotesConstants.ISTRMAX];
	/**
	 * Character(s) separating<br>
	 * components of date string<br>
	 * C type : char[ISTRMAX]
	 */
	public byte[] DateString = new byte[NotesConstants.ISTRMAX];
	/**
	 * Character(s) separating<br>
	 * components of time string<br>
	 * C type : char[ISTRMAX]
	 */
	public byte[] TimeString = new byte[NotesConstants.ISTRMAX];
	/**
	 * String denoting previous<br>
	 * day<br>
	 * C type : char[YTSTRMAX]
	 */
	public byte[] YesterdayString = new byte[NotesConstants.YTSTRMAX];
	/**
	 * String denoting current day<br>
	 * C type : char[YTSTRMAX]
	 */
	public byte[] TodayString = new byte[NotesConstants.YTSTRMAX];
	/** C type : char[YTSTRMAX] */
	public byte[] TomorrowString = new byte[NotesConstants.YTSTRMAX];
	
	public IntlFormatStruct() {
		super();
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static IntlFormatStruct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<IntlFormatStruct>) () -> new IntlFormatStruct());
	}
	
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"Flags", //$NON-NLS-1$
			"CurrencyDigits", //$NON-NLS-1$
			"Length", //$NON-NLS-1$
			"TimeZone", //$NON-NLS-1$
			"AMString", //$NON-NLS-1$
			"PMString", //$NON-NLS-1$
			"CurrencyString", //$NON-NLS-1$
			"ThousandString", //$NON-NLS-1$
			"DecimalString", //$NON-NLS-1$
			"DateString", //$NON-NLS-1$
			"TimeString", //$NON-NLS-1$
			"YesterdayString", //$NON-NLS-1$
			"TodayString", //$NON-NLS-1$
			"TomorrowString" //$NON-NLS-1$
		);
	}
	
	public IntlFormatStruct(Pointer peer) {
		super(peer);
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static IntlFormatStruct newInstance(final Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<IntlFormatStruct>) () -> new IntlFormatStruct(peer));
	}

	public static class ByReference extends IntlFormatStruct implements Structure.ByReference {
		
	};
	public static class ByValue extends IntlFormatStruct implements Structure.ByValue {
		
	};
}
