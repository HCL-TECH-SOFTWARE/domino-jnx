/*
 * ==========================================================================
 * Copyright (C) 2019-2022 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs;

import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.hcl.domino.commons.structs.WrongArraySizeException;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class KFM_PASSWORDStruct extends BaseStructure {
	/** Type of hash.  This value should be */
	public byte Type;
	/**
	 * Hashed password<br>
	 * C type : BYTE[48]
	 */
	public byte[] HashedPassword = new byte[48];
	
	public KFM_PASSWORDStruct() {
		super();
	}

	public static KFM_PASSWORDStruct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<KFM_PASSWORDStruct>) () -> new KFM_PASSWORDStruct());
	}

	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("Type", "HashedPassword"); //$NON-NLS-1$ //$NON-NLS-2$
	}
	
	/**
	 * @param Type Type of hash.  This value should be<br>
	 * @param HashedPassword Hashed password<br>
	 * C type : BYTE[48]
	 */
	public KFM_PASSWORDStruct(byte Type, byte HashedPassword[]) {
		super();
		this.Type = Type;
		if ((HashedPassword.length != this.HashedPassword.length)) {
			throw new WrongArraySizeException("HashedPassword"); //$NON-NLS-1$
		}
		this.HashedPassword = HashedPassword;
	}
	
	public KFM_PASSWORDStruct(Pointer peer) {
		super(peer);
	}
	
	public static KFM_PASSWORDStruct newInstance(Pointer ptr) {
		return AccessController.doPrivileged((PrivilegedAction<KFM_PASSWORDStruct>) () -> new KFM_PASSWORDStruct(ptr));
	}

	public static class ByReference extends KFM_PASSWORDStruct implements Structure.ByReference {
		
	};
	public static class ByValue extends KFM_PASSWORDStruct implements Structure.ByValue {
		
	};
	
	public static KFM_PASSWORDStruct.ByReference newInstanceByReference() {
		return AccessController.doPrivileged((PrivilegedAction<ByReference>) () -> new KFM_PASSWORDStruct.ByReference());
	}

}
