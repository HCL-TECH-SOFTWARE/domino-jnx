/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesNFMTStruct extends BaseStructure {
	/** Number of decimal digits */
	public byte Digits;
	/** Display Format */
	public byte Format;
	/** Display Attributes */
	public byte Attributes;
	public byte Unused;
	public NotesNFMTStruct() {
		super();
	}
	
	public static NotesNFMTStruct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<NotesNFMTStruct>) () -> new NotesNFMTStruct());
	}

	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"Digits", //$NON-NLS-1$
			"Format", //$NON-NLS-1$
			"Attributes", //$NON-NLS-1$
			"Unused" //$NON-NLS-1$
		);
	}
	/**
	 * @param Digits Number of decimal digits<br>
	 * @param Format Display Format<br>
	 * @param Attributes Display Attributes
	 * @param Unused not used
	 */
	public NotesNFMTStruct(byte Digits, byte Format, byte Attributes, byte Unused) {
		super();
		this.Digits = Digits;
		this.Format = Format;
		this.Attributes = Attributes;
		this.Unused = Unused;
	}
	
	public static NotesNFMTStruct newInstance(final byte Digits, final byte Format, final byte Attributes, final byte Unused) {
		return AccessController.doPrivileged((PrivilegedAction<NotesNFMTStruct>) () -> new NotesNFMTStruct(Digits, Format, Attributes, Unused));
	}

	public NotesNFMTStruct(Pointer peer) {
		super(peer);
	}
	
	public static NotesNFMTStruct newInstance(final Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<NotesNFMTStruct>) () -> new NotesNFMTStruct(peer));
	}

	public static class ByReference extends NotesNFMTStruct implements Structure.ByReference {
		
	};
	public static class ByValue extends NotesNFMTStruct implements Structure.ByValue {
		
	};
}
