/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs.security;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SEC_MEMOBJ_DESC extends Structure {
	public int mhObj; //MEMHANDLE
	/** C type : BYTE* */
	public Pointer pObj;
	public int dwSize;
	public int type;
	
	public SEC_MEMOBJ_DESC() {
		super();
	}
	
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"mhObj", //$NON-NLS-1$
			"pObj", //$NON-NLS-1$
			"dwSize", //$NON-NLS-1$
			"type" //$NON-NLS-1$
		);
	}
	/**
	 * @param mhObj handle to the memory object
	 * @param pObj C type : BYTE*
	 * @param dwSize the size of the object
	 * @param type the type of the object
	 */
	public SEC_MEMOBJ_DESC(int mhObj, Pointer pObj, int dwSize, int type) {
		super();
		this.mhObj = mhObj;
		this.pObj = pObj;
		this.dwSize = dwSize;
		this.type = type;
	}
	public SEC_MEMOBJ_DESC(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends SEC_MEMOBJ_DESC implements Structure.ByReference {
		
	};
	public static class ByValue extends SEC_MEMOBJ_DESC implements Structure.ByValue {
		
	};
}
