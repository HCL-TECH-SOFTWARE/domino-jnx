/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.hcl.domino.jna.internal.NotesStringUtils;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * <i>native declaration : line 2</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class StringListStruct extends BaseStructure {
	/** number of strings in the list - 0 indicates empty list ('first' is undefined) */
	public int count;
	/**
	 * pointer to first string in list - undefined if count==0<br>
	 * C type : char*
	 */
	public Pointer first;
	
	public StringListStruct() {
		super();
	}

	/**
	 * Converts all string list values to a Java {@link List}
	 * 
	 * @return list
	 */
	public List<String> getValues() {
		if (count==0) {
			return Collections.emptyList();
		}

		List<String> strValues = new ArrayList<>(count);
		int offset = 0;
		
		Pointer stringStartPtr = first;
		
		for (int i=0; i<count; i++) {
			while (stringStartPtr.getByte(offset)!=0) {
				offset++;
			}
			String currStr = NotesStringUtils.fromLMBCS(stringStartPtr, offset);
			strValues.add(currStr);
			stringStartPtr = stringStartPtr.share(offset+1);
		}
		return strValues;
	}

	public static StringListStruct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<StringListStruct>) () -> new StringListStruct());
	}


	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("count", "first"); //$NON-NLS-1$ //$NON-NLS-2$
	}

	/**
	 * @param count number of strings in the list - 0 indicates empty list ('first' is undefined)<br>
	 * @param first pointer to first string in list - undefined if count==0<br>
	 * C type : char*
	 */
	public StringListStruct(int count, Pointer first) {
		super();
		this.count = count;
		this.first = first;
	}

	public static StringListStruct newInstance(final int count, final Pointer first) {
		return AccessController.doPrivileged((PrivilegedAction<StringListStruct>) () -> new StringListStruct(count, first));
	}

	public StringListStruct(Pointer peer) {
		super(peer);
	}

	public static StringListStruct newInstance(final Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<StringListStruct>) () -> new StringListStruct(peer));
	}

	public static class ByReference extends StringListStruct implements Structure.ByReference {

	};

	public static class ByValue extends StringListStruct implements Structure.ByValue {

	};
}
