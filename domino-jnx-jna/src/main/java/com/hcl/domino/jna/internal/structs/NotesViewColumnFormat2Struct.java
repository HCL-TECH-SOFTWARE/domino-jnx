/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesViewColumnFormat2Struct extends BaseStructure {
	/** VIEW_COLUMN_FORMAT_SIGNATURE2 */
	public short Signature;
	/** FontID of column header. */
	public int HeaderFontID;
	/**
	 * UNID of view to switch to.<br>
	 * C type : UNID
	 */
	public NotesUniversalNoteIdStruct ResortToViewUNID;
	/** 0 based index of secondary resort column. */
	public short wSecondResortColumnIndex;
	public short Flags3;
	public short wHideWhenFormulaSize;
	public short wTwistieResourceSize;
	/** V6 View Customization support */
	public short wCustomOrder;
	/** V6 View Customization support */
	public short wCustomHiddenFlags;
	/**
	 * V6 - Column Text Color<br>
	 * C type : COLOR_VALUE
	 */
	public NotesColorValueStruct ColumnColor;
	/**
	 * V6 - column header color<br>
	 * C type : COLOR_VALUE
	 */
	public NotesColorValueStruct HeaderFontColor;
	public NotesViewColumnFormat2Struct() {
		super();
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesViewColumnFormat2Struct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<NotesViewColumnFormat2Struct>) () -> new NotesViewColumnFormat2Struct());
	}

	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"Signature", //$NON-NLS-1$
			"HeaderFontID", //$NON-NLS-1$
			"ResortToViewUNID", //$NON-NLS-1$
			"wSecondResortColumnIndex", //$NON-NLS-1$
			"Flags3", //$NON-NLS-1$
			"wHideWhenFormulaSize", //$NON-NLS-1$
			"wTwistieResourceSize", //$NON-NLS-1$
			"wCustomOrder", //$NON-NLS-1$
			"wCustomHiddenFlags", //$NON-NLS-1$
			"ColumnColor", //$NON-NLS-1$
			"HeaderFontColor" //$NON-NLS-1$
		);
	}
	public NotesViewColumnFormat2Struct(Pointer peer) {
		super(peer);
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesViewColumnFormat2Struct newInstance(final Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<NotesViewColumnFormat2Struct>) () -> new NotesViewColumnFormat2Struct(peer));
	}

	public static class ByReference extends NotesViewColumnFormat2Struct implements Structure.ByReference {
		
	};
	public static class ByValue extends NotesViewColumnFormat2Struct implements Structure.ByValue {
		
	};
}
