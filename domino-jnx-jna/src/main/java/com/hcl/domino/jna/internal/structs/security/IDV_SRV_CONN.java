/*
 * ==========================================================================
 * Copyright (C) 2019-2021 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs.security;
import java.util.Arrays;
import java.util.List;

import com.hcl.domino.commons.structs.WrongArraySizeException;
import com.hcl.domino.jna.internal.gc.handles.DHANDLE;
import com.hcl.domino.misc.NotesConstants;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IDV_SRV_CONN extends Structure {
	/** Try to connect to another server */
	public byte fTryAgain;
	/** Set if we connected to a vault-aware */
	public byte fReferralSrvsSet;
	/** C type : DHANDLE */
	public DHANDLE hClusterMates;
	/**
	 * Ptr to current referral/replica server<br>
	 * C type : IDV_OBJECT*
	 */
	public Pointer pCurrRefSrv; // IDV_OBJECT
	/**
	 * Ptr to referral server list<br>
	 * C type : IDV_OBJECT*
	 */
	public Pointer pReferralSrvs; // IDV_OBJECT
	/**
	 * Name of server to connect to<br>
	 * C type : char[MAXUSERNAME]
	 */
	public byte[] ServerName = new byte[NotesConstants.MAXUSERNAME];
	
	public IDV_SRV_CONN() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"fTryAgain", //$NON-NLS-1$
			"fReferralSrvsSet", //$NON-NLS-1$
			"hClusterMates", //$NON-NLS-1$
			"pCurrRefSrv", //$NON-NLS-1$
			"pReferralSrvs", //$NON-NLS-1$
			"ServerName" //$NON-NLS-1$
		);
	}
	/**
	 * @param fTryAgain Try to connect to another server<br>
	 * @param fReferralSrvsSet Set if we connected to a vault-aware<br>
	 * @param hClusterMates C type : DHANDLE<br>
	 * @param pCurrRefSrv Ptr to current referral/replica server<br>
	 * C type : IDV_OBJECT*<br>
	 * @param pReferralSrvs Ptr to referral server list<br>
	 * C type : IDV_OBJECT*<br>
	 * @param ServerName Name of server to connect to<br>
	 * C type : char[MAXUSERNAME]
	 */
	public IDV_SRV_CONN(byte fTryAgain, byte fReferralSrvsSet, DHANDLE hClusterMates, Pointer /*IDV_OBJECT */ pCurrRefSrv, Pointer /* IDV_OBJECT */ pReferralSrvs, byte ServerName[]) {
		super();
		this.fTryAgain = fTryAgain;
		this.fReferralSrvsSet = fReferralSrvsSet;
		this.hClusterMates = hClusterMates;
		this.pCurrRefSrv = pCurrRefSrv;
		this.pReferralSrvs = pReferralSrvs;
		if ((ServerName.length != this.ServerName.length)) {
			throw new WrongArraySizeException("ServerName"); //$NON-NLS-1$
		}
		this.ServerName = ServerName;
	}
	public IDV_SRV_CONN(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends IDV_SRV_CONN implements Structure.ByReference {
		
	};
	public static class ByValue extends IDV_SRV_CONN implements Structure.ByValue {
		
	};
}
