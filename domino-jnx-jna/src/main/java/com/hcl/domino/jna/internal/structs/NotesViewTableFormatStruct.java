/*
 * ==========================================================================
 * Copyright (C) 2019-2022 HCL America, Inc. ( http://www.hcl.com/ )
 *                            All rights reserved.
 * ==========================================================================
 * Licensed under the  Apache License, Version 2.0  (the "License").  You may
 * not use this file except in compliance with the License.  You may obtain a
 * copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.
 *
 * Unless  required  by applicable  law or  agreed  to  in writing,  software
 * distributed under the License is distributed on an  "AS IS" BASIS, WITHOUT
 * WARRANTIES OR  CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the  specific language  governing permissions  and limitations
 * under the License.
 * ==========================================================================
 */
package com.hcl.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesViewTableFormatStruct extends BaseStructure {
	/** C type : VIEW_FORMAT_HEADER */
	public NotesViewFormatHeaderStruct Header;
	/** Number of columns */
	public short Columns;
	/** Seq. number for unique item names */
	public short ItemSequenceNumber;
	/** (see VIEW_TABLE_xxx) */
	public short Flags;
	/** Flags */
	public short Flags2;
	public NotesViewTableFormatStruct() {
		super();
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesViewTableFormatStruct newInstance() {
		return AccessController.doPrivileged((PrivilegedAction<NotesViewTableFormatStruct>) () -> new NotesViewTableFormatStruct());
	}

	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(
			"Header", //$NON-NLS-1$
			"Columns", //$NON-NLS-1$
			"ItemSequenceNumber", //$NON-NLS-1$
			"Flags", //$NON-NLS-1$
			"Flags2" //$NON-NLS-1$
		);
	}
	/**
	 * @param Header C type : VIEW_FORMAT_HEADER<br>
	 * @param Columns Number of columns<br>
	 * @param ItemSequenceNumber Seq. number for unique item names<br>
	 * @param Flags (see VIEW_TABLE_xxx)<br>
	 * @param Flags2 Flags
	 */
	public NotesViewTableFormatStruct(NotesViewFormatHeaderStruct Header, short Columns, short ItemSequenceNumber, short Flags, short Flags2) {
		super();
		this.Header = Header;
		this.Columns = Columns;
		this.ItemSequenceNumber = ItemSequenceNumber;
		this.Flags = Flags;
		this.Flags2 = Flags2;
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesViewTableFormatStruct newInstance(final NotesViewFormatHeaderStruct Header, final short Columns, final short ItemSequenceNumber,
			final short Flags, final short Flags2) {
		return AccessController.doPrivileged((PrivilegedAction<NotesViewTableFormatStruct>) () -> new NotesViewTableFormatStruct(Header, Columns, ItemSequenceNumber, Flags, Flags2));
	}

	public NotesViewTableFormatStruct(Pointer peer) {
		super(peer);
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesViewTableFormatStruct newInstance(final Pointer peer) {
		return AccessController.doPrivileged((PrivilegedAction<NotesViewTableFormatStruct>) () -> new NotesViewTableFormatStruct(peer));
	}

	public static class ByReference extends NotesViewTableFormatStruct implements Structure.ByReference {
		
	};
	public static class ByValue extends NotesViewTableFormatStruct implements Structure.ByValue {
		
	};
}