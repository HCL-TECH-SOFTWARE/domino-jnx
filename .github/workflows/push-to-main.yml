name: Push-to-main

# Run workflow on commits to the `master` or `main` branch
on:
  push:
    branches:
      - master
      - main

jobs:
  build-multi-version-tool:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      - name: Build the POM manipulator
        run: |
          cd multi-version-tool
          mvn --batch-mode clean install
          cd ..
      - name: Save the POM manipulator
        uses: actions/upload-artifact@v4
        with:
          name: multi-version-tool
          path: multi-version-tool/target/multi-version-tool-jar-with-dependencies.jar
          retention-days: 1

  JNX-release:
    runs-on: ubuntu-latest
    needs: build-multi-version-tool
    strategy:
      matrix:
        options:
          - jdk: 17
            domino: R12
          - jdk: 17
            domino: R14
          - jdk: 21
            domino: R145

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java ${{ matrix.options.jdk }} and Maven
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.options.jdk }}
          distribution: 'adopt'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: retrieve the POM manipulator
        uses: actions/download-artifact@v4
        with:
          name: multi-version-tool

      - name: Apply the POM manipulator for ${{ matrix.options.domino }}
        run: |
          java -jar ./multi-version-tool-jar-with-dependencies.jar . ${{ matrix.options.domino }}
          pwd
          cat pom.xml
      - name: Extract Project version for ${{ matrix.options.domino }}
        id: project
        run: echo projectversion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout) >> $GITHUB_ENV

      - name: Install gpg secret key
        id: install-secret-key
        run: |
          cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Release ${{ matrix.options.domino }} Maven package to Central
        id: publish-to-central
        # Only publish on main when the version does NOT end on -SNAPSHOT
        if: ${{ !endsWith(env.projectversion, '-SNAPSHOT') }}
        env:
          MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          mvn --batch-mode -P${{ matrix.options.domino }} \
            -Pdeploy \
            -Dnexus.username=${{ secrets.NEXUS_USERNAME }} \
            -Dnexus.password=${{ secrets.NEXUS_PASSWORD }} \
            -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
            clean deploy
